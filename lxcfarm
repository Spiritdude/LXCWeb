#!/usr/bin/perl

# -- LXC Farm, written by Rene K. Mueller <spiritdude@gmail.com>
#
$VERSION = '0.008';
$APPNAME = 'lxcfarm';
#
# License: GPLv2
#
# History:
# 2012/12/13: more refined info of the container (from lxcweb)
# 2012/11/30: initial version

use File::Copy;

$conf{homerun} = '/var/lib/lxc';

$do = shift(@ARGV);
$orig = shift(@ARGV) if($ARGV[0] eq '-o');
$temp = shift(@ARGV) if($ARGV[0] eq '-t');

# -- rest of arguments are the machines

usage() if(!$do||($#ARGV<0&&$do ne 'info'));
print "ERROR: Insufficient priviledges, need to be run as root.\n" if($>&&$do ne 'info');

(@ARGV) = scanDir("$conf{homerun}") if($#ARGV<0&&$do eq 'info');

$temp = 'ubuntu' unless($temp);

# -- retrieve host info
open(F,"/proc/uptime"); $_ = <F>; close(F);
$info{_host}{uptime} = prettyTime($1) if(/(\S+)/);
$_ = `uptime`;
$info{_host}{cpu} = $cpu = $1 if(/load average: ([\d\.]+)/);
$info{_host}{name} = `hostname`; chop($info{_host}{name});
$info{_host}{status} = 'up';
$info{_host}{info} = `uname -or`; chop($info{_host}{info});
$_ = `ifconfig`;
foreach (split(/\n/)) {
   $info{_host}{ip} = $1, last if(/inet addr:(\S+)/);
}
$_ = `df $conf{homerun}`;
$info{_host}{disktotal} = $1, $info{_host}{disk} = $2, $info{_host}{diskfree} = $3 
   if(/\/dev\S+\s+(\d+)\s+(\d+)\s+(\d+)/);
open(F,"/proc/meminfo");
while(<F>) {
   if(/(\S+):\s+(.+)/) {
      my $a = lc $1;
      $info{_host}{$a} = $2;
   }
}
close(F);

# -- calculate some stuff 
$info{_host}{mem} = $info{_host}{memtotal}-$info{_host}{memfree};
$info{_host}{swap} = $info{_host}{swaptotal}-$info{_host}{swapfree};
$info{_host}{'mem%'} = sprintf("%.1f%%",100/$info{_host}{memtotal}*$info{_host}{mem})
   if($info{_host}{memtotal});
$info{_host}{'swap%'} = sprintf("%.1f%%",100/$info{_host}{swaptotal}*$info{_host}{swap})
   if($info{_host}{swaptotal});
$info{_host}{'memfree%'} = sprintf("%.1f%%",100/$info{_host}{memtotal}*$info{_host}{memfree})
   if($info{_host}{memtotal});
$info{_host}{'swapfree%'} = sprintf("%.1f%%",100/$info{_host}{swaptotal}*$info{_host}{swapfree})
   if($info{_host}{swaptotal});
if($info{_host}{disktotal}) {
   $info{_host}{'disk%'} = sprintf("%.1f%%",100/$info{_host}{disktotal}*$info{_host}{disk});
   $info{_host}{'diskfree%'} = sprintf("%.1f%%",100/$info{_host}{disktotal}*$info{_host}{diskfree});
}

# -- determine resource usage per container
foreach my $id (scanDir($conf{homerun})) {
   $info{$id}{name} = $id;
   $info{$id}{status} = 'down';
   $info{$id}{type} = 'ubuntu';
   $info{$id}{cpu} = '';
   $info{$id}{disk} = 1; #$1 if(cacheCMD("du -s $conf{homerun}/$id/rootfs")=~/(\S+)/);  # --- very slow ... caching? async?
   $info{$id}{'disk%'} = sprintf("%.2f%%",100/$info{_host}{disktotal}*$info{$id}{disk}) if($info{_host}{disktotal});
   $info{$id}{iptype} = '';
   $info{$id}{ip} = '';
   if(open(F,"$conf{homerun}/$id/rootfs/var/lib/dhcp/dhclient.eth0.leases")||
      open(F,"$conf{homerun}/$id/rootfs/var/lib/dhclient/dhclient-eth0.leases")) {
      while(<F>) {
         $info{$id}{iptype} = 'auto', $info{$id}{ip} = $1 if(/fixed-address\s+([\d\.]+);/);
      }
      close(F);
   } else {
      open(F,"$conf{homerun}/$id/rootfs/etc/network/interfaces");
      while(<F>) {
         $info{$id}{iptype} = 'static', $info{$id}{ip} = $1 if(/^\s*iface\s*eth0\s*inet\s*(\S+)/);
      }
      close(F);
      #$info{$id}{ip} = '?';
   }
   foreach(qw(lxcweb.inf rootfs/boot)) { 
      my $ct = (stat("$conf{homerun}/$id/$_"))[9];
      $info{$id}{ctime} = $ct;
      last if($ct);
   }
   # -- basic info of the container
   open(F,"$conf{homerun}/$id/config");
   while(<F>) {
      chop; next if(/^\s*#/);
      $info{$id}{$1} = $2 if(/(\S+)\s*=\s*(\S+)/);
   }
   close(F);
   
   # -- additional info
   open(F,"$conf{homerun}/$id/lxcweb.inf");
   while(<F>) {
      chop; next if(/^\s*#/);
      $info{$id}{$1} = $2 if(/(\S+):\s*(\S+)/);
   }
   close(F);

   # -- check max of each field
   foreach (keys %{$info{$id}}) {
      $max{$_} = $info{$id}{$_} if($info{$id}{$_}>$max{$_});
   }

   $info{$id}{ctime} = prettyDate($info{$id}{ctime})." (".prettyTime(time()-$info{$id}{ctime})." ago)" 
      if($info{$id}{ctime});
   
   $info{$id}{uptime} = 0;
   $info{$id}{procs} = 0;
}

# -- get basic info (cpu, memsize, command) via 'ps' 
foreach(split(/\n/,`ps -o pid,pcpu,size,command wax`)) {
   @_ = split(/\s+/);
   my $i;
   foreach (qw(pid cpu size command)) {
      $proc{$_[0]}{"_$_"} = $_[$i++];
   }
}

# -- more details via /proc/ (cpu isn't simple to determine via /proc/*/stat)
opendir(D,"/proc/");
foreach my $pid (readdir(D)) {
   foreach my $f (qw(cgroup stat status io cmdline)) {
      open(F,"/proc/$pid/$f"); $_ = join('',<F>); close(F);
      $proc{$pid}{$f} = $_;
   }
   if($proc{$pid}{cgroup}=~/^8:perf_event:\/lxc\/(\S+)/) {
      my $id = $1;
      $info{$id}{procs}++;
      foreach my $f (qw(io status)) {
         foreach(split(/\n/,$proc{$pid}{$f})) {
            chop; $proc{$pid}{$1} = $2 if(/^(\S+):\s*(\S*+)/);
         }
      }
      $info{$id}{cpu} += $proc{$pid}{_cpu}; $info{$id}{cpu} = sprintf("%.2f%%",$info{$id}{cpu});
      $info{$id}{mem} += $proc{$pid}{VmData};   # -- VmSize
      $info{$id}{io_read} += $proc{$pid}{rchar};
      $info{$id}{io_write} += $proc{$pid}{wchar};
      
      foreach (qw(procs cpu mem)) {
         $max{$_} = $info{$id}{$_} if($info{$id}{$_}>$max{$_});
      }
      $max{procstotal}++;

      #$info{$id}{cpu} = $cpu;
      $info{$id}{status} = 'up';
      open(F,"/sys/fs/cgroup/freezer/lxc/$id/freezer.state"); $_ = <F>; close(F);
      $info{$id}{status} = 'freeze' if(/frozen/i);

      #$info{$id}{uptime} = prettyTime(time()-(stat("$conf{homerun}/$id/rootfs.hold"))[9]) if($info{$id}{status}eq'up');
      $info{$id}{uptime} = prettyTime(time()-(stat("$conf{homerun}/$id/.stamp.run"))[9]) if($info{$id}{status}eq'up');
   }
}
closedir(D);
$max{procstotal} = $max{procs} = 1 unless($max{procs});

$stats{up} = $stats{down} = $stats{setup} = $stats{broken} = 0;

# -- some post-processing
foreach my $id (@sel) {
   $info{$id}{status} = 'broken' if(-f "$conf{homerun}/$id/.stamp.run"&&$info{$id}{status}eq'down');
   $info{$id}{status} = 'broken' if($info{$id}{status}eq'up'&&$info{$id}{procs}==0);
   #$info{$id}{'mem%'} = sprintf("%.1f%%",100/$max{'mem'}*$info{$id}{'mem'}) if($max{'mem'});
   $info{$id}{'mem%'} = sprintf("%.1f%%",100/$info{_host}{'mem'}*$info{$id}{'mem'}) if($info{_host}{'mem'});
   $stats{$info{$id}{status}}++;
   $stats{setup}++;
}

my(@m);

foreach my $name (@ARGV) {
   if($name=~/(\d+)\.\.\D*(\d+)/) {
      my $n = $2-$1+1;
      my $i;
      $name =~ s/(\D+\d+).*/$1/;
      push(@m,$name++), $i++ while($i<$n);
   } else {
      push(@m,$name);
   }
}

if($do) {
   print "$APPNAME: perform $do on ".($#m+1)." containers:\n";
} else {
   usage();
}
               
foreach my $id (@m) {
   if($do eq 'create'&&-e "$conf{homerun}/$id") {
      print "\tskipping $id, exists already\n";

   } else {
      print "\t",($i+1)," of ".($#m+1).": ";
      if($do eq 'create') {
         if($orig) {
            print "clone $orig to $id\n";
            `lxc-clone -o $orig -n $id`; # --logfile=$conf{homerun}/$id/lxcweb-error.log`;
            copy("$conf{homerun}/$orig/lxcweb.inf","$conf{homerun}/$id/lxcweb.inf");

         } else {
            print "create $id ($temp)\n";
            `lxc-create -t $temp -n $id`; # --logfile=$conf{homerun}/$id/lxcweb-error.log`;
            open(F,">$conf{homerun}/$id/lxcweb.inf");
            print F "type: $temp\nctime: ".time()."\n";
            close(F);
         }
         
      } elsif($do eq 'start') {
         if($info{$id}{status}eq'down') {
            print "start $id\n";
            if(1) {
               `lxc-start -n $id -d --logfile=$conf{homerun}/$id/lxcweb-error.log`;
            } else {
               if(fork()==0) {
                  `lxc-start -n $id --logfile=$conf{homerun}/$id/lxcweb-error.log`;
                  exit(0);
               }
            }
            open(F,">$conf{homerun}/$id/.stamp.run"); close(F);
            sleep(1);
         } else {
            my $s = $info{$id}{status}; $s = 'down' unless($s);
            print "$id cannot be started, status is $s\n";
         }
         
      } elsif($do eq 'freeze') {
         if($info{$id}{status}eq'up') {
            print "freeze $id\n";
            `lxc-freeze -n $id`; # --logfile=$conf{homerun}/$id/lxcweb-error.log`;
         } else {
            my $s = $info{$id}{status}; $s = 'down' unless($s);
            print "$id cannot be frozen, because status is $s\n";
         }
         
      } elsif($do eq 'unfreeze') {
         if($info{$id}{status}eq'freeze') {
            print "unfreeze $id\n";
            `lxc-unfreeze -n $id`; # --logfile=$conf{homerun}/$id/lxcweb-error.log`;
         } else {
            my $s = $info{$id}{status}; $s = 'down' unless($s);
            print "$id cannot be unfreeze, because status is $s\n";
         }
         
      } elsif($do eq 'stop') {
         if($info{$id}{status}eq'up') {
            print "stop $id\n";
            `lxc-stop -n $id`; # --logfile=$conf{homerun}/$id/lxcweb-error.log`;
            unlink("$conf{homerun}/$id/.stamp.run");
         } else {
            my $s = $info{$id}{status}; $s = 'down' unless($s);
            print "$id cannot be stopped, because status is $s\n";
         }
         
      } elsif($do eq 'destroy') {
         if($info{$id}{status}eq'down') {
            print "destroy $id\n";
            `lxc-destroy -n $id`; # --logfile=$conf{homerun}/$id/lxcweb-error.log`;
         } else {
            my $s = $info{$id}{status}; $s = 'down' unless($s);
            print "$id cannot be destroyed, because status is $s\n";
         }
         
      } elsif($do eq 'info') {
         print "info $id\n";
         foreach (qw(name status ip cpu procs mem disk comment)) {
            print "\t".sprintf("%10s",$_).": $info{$id}{$_}\n"; # if($info{$id}{$_});
         } 
         print "\n";

      } else {
         print "Error: unknown command $do\n";
         usage();
      }
      $i++;
   }
}


sub usage {
   print "\nUsage $APPNAME $VERSION: [cmd] {-o [clone-base]} {-t [template]} {id}...\n\tcmd\t\tcommand: {start,stop,create,freeze,unfreeze,destroy,info}\n\t-o clone-base\te.g. -o ubu00\n\t-t template\te.g. -t ubuntu\n";
   print "\nExamples:\n\tlxcfarm create -t ubuntu ubu00\n\tlxcfarm create -o ubu00 ubu01..20\n\tlxcfarm start ubu01..20\n\tlxcfarm stop ubu02 ubu05 ubu10..15\n\tlxcfarm info\n\tlxcfarm info ubu01..10\n";
   print "\n";
   exit 1;
}

sub prettyDate {
   @_ = localtime($_[0]);
   sprintf("%04d/%02d/%02d %02d:%02d:%02d",$_[5]+1900,$_[4]+1,$_[3],$_[2],$_[1],$_[0]);
}

sub prettyTime {
   my($t) = @_;
   sprintf("%dd %02dh %02dm %02ds",int($t/(24*60*60)),int($t/(60*60))%24,int($t/60)%60,int($t)%60);
}

sub scanDir() {
   my($d,$p) = @_;
   opendir(D,$d);
   $p = '.' unless($p);
   @_ = sort grep(!/\./&&/$p/,readdir(D));
   closedir(D);
   return @_;
}

