#!/usr/bin/perl

# -- LXC Farm, written by Rene K. Mueller <spiritdude@gmail.com>
#
$VERSION = '0.006';
$APPNAME = 'lxcfarm';
#
# License: GPLv2
#
# History:
# 2012/11/30: initial version

use File::Copy;

$conf{homerun} = '/var/lib/lxc';

$do = shift(@ARGV);
$orig = shift(@ARGV) if($ARGV[0] eq '-o');
$temp = shift(@ARGV) if($ARGV[0] eq '-t');

# -- rest of arguments are the machines

usage() if(!$do||$#ARGV<0);
print "ERROR: Insufficient priviledges, need to be run as root.\n" if($>);

$temp = 'ubuntu' unless($temp);

# -- determine the status of the RUNNING containers
# ps -o <attr>
#       c     cmd          simple name of executable
#       C     pcpu         cpu utilization
#       f     flags        flags as in long format F field
#       g     pgrp         process group ID
#       G     tpgid        controlling tty process group ID
#       j     cutime       cumulative user time
#       J     cstime       cumulative system time
#       k     utime        user time
#       m     min_flt      number of minor page faults
#       M     maj_flt      number of major page faults
#       n     cmin_flt     cumulative minor page faults
#       N     cmaj_flt     cumulative major page faults
#       o     session      session ID
#       p     pid          process ID
#       P     ppid         parent process ID
#       r     rss          resident set size
#       R     resident     resident pages
#       s     size         memory size in kilobytes
#       S     share        amount of shared pages
#       t     tty          the device number of the controlling tty
#       T     start_time   time process was started
#       U     uid          user ID number
#       u     user         user name
#       v     vsize        total VM size in KiB
#       y     priority     kernel scheduling priority
                                          
foreach(split(/\n/,`ps -o cgroup,stat,euid,ruid,pid,pcpu,size,command wax`)) {
   if(/^\d+:perf_event:\/lxc\/(\S+),\S*\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)/) {
      my $id = $1;
      $info{$id}{procs}++;
      $info{$id}{cpu} += $6; $info{$id}{cpu} = sprintf("%.2f%%",$info{$id}{cpu});
      $info{$id}{mem} += $7;
      foreach (qw(procs cpu mem)) {
         $max{$_} = $info{$id}{$_} if($info{$id}{$_}>$max{$_});
      }
   }
   if(/lxc-start \-n (\S+)/) {
      my $id = $1;
      #$info{$id}{cpu} = $cpu;
      $info{$id}{status} = 'up';
      open(F,"/sys/fs/cgroup/freezer/lxc/$id/freezer.state"); $_ = <F>; close(F);
      $info{$id}{status} = 'freeze' if(/frozen/i);
      $info{$id}{uptime} = prettyTime(time()-(stat("$conf{homerun}/$id/.stamp.run"))[9]) if($info{$id}{status}eq'up');
   }
}
$max{procstotal} = $max{procs} = 1 unless($max{procs});

$stats{up} = $stats{down} = $stats{setup} = $stats{broken} = 0;

# -- some post-processing
foreach my $id (@sel) {
   $info{$id}{status} = 'broken' if(-f "$conf{homerun}/$id/.stamp.run"&&$info{$id}{status}eq'down');
   $info{$id}{status} = 'broken' if($info{$id}{status}eq'up'&&$info{$id}{procs}==0);
   #$info{$id}{'mem%'} = sprintf("%.1f%%",100/$max{'mem'}*$info{$id}{'mem'}) if($max{'mem'});
   $info{$id}{'mem%'} = sprintf("%.1f%%",100/$info{_host}{'mem'}*$info{$id}{'mem'}) if($info{_host}{'mem'});
   $stats{$info{$id}{status}}++;
   $stats{setup}++;
}

my(@m);

foreach my $name (@ARGV) {
   if($name=~/(\d+)\.\.\D*(\d+)/) {
      my $n = $2-$1+1;
      my $i;
      $name =~ s/(\D+\d+).*/$1/;
      push(@m,$name++), $i++ while($i<$n);
   } else {
      push(@m,$name);
   }
}

if($do) {
   print "$APPNAME: perform $do on ".($#m+1)." containers:\n";
} else {
   usage();
}
               
foreach my $id (@m) {
   if($do eq 'create'&&-e "$conf{homerun}/$id") {
      print "\tskipping $id, exists already\n";

   } else {
      print "\t",($i+1)," of ".($#m+1).": ";
      if($do eq 'create') {
         if($orig) {
            print "clone $orig to $id\n";
            `lxc-clone -o $orig -n $id`; # --logfile=$conf{homerun}/$id/lxcweb-error.log`;
            copy("$conf{homerun}/$orig/lxcweb.inf","$conf{homerun}/$id/lxcweb.inf");

         } else {
            print "create $id ($temp)\n";
            `lxc-create -t $temp -n $id`; # --logfile=$conf{homerun}/$id/lxcweb-error.log`;
            open(F,">$conf{homerun}/$id/lxcweb.inf");
            print F "type: $temp\nctime: ".time()."\n";
            close(F);
         }
         
      } elsif($do eq 'start') {
         if(!$info{$id}{status}) {
            print "start $id\n";
            if(1) {
               `lxc-start -n $id -d --logfile=$conf{homerun}/$id/lxcweb-error.log`;
            } else {
               if(fork()==0) {
                  `lxc-start -n $id --logfile=$conf{homerun}/$id/lxcweb-error.log`;
                  exit(0);
               }
            }
            open(F,">$conf{homerun}/$id/.stamp.run"); close(F);
            sleep(1);
         } else {
            my $s = $info{$id}{status}; $s = 'down' unless($s);
            print "$id cannot be started, status is $s\n";
         }
         
      } elsif($do eq 'freeze') {
         if($info{$id}{status}eq'up') {
            print "freeze $id\n";
            `lxc-freeze -n $id`; # --logfile=$conf{homerun}/$id/lxcweb-error.log`;
         } else {
            my $s = $info{$id}{status}; $s = 'down' unless($s);
            print "$id cannot be frozen, because status is $s\n";
         }
         
      } elsif($do eq 'unfreeze') {
         if($info{$id}{status}eq'freeze') {
            print "unfreeze $id\n";
            `lxc-unfreeze -n $id`; # --logfile=$conf{homerun}/$id/lxcweb-error.log`;
         } else {
            my $s = $info{$id}{status}; $s = 'down' unless($s);
            print "$id cannot be unfreeze, because status is $s\n";
         }
         
      } elsif($do eq 'stop') {
         if($info{$id}{status}eq'up') {
            print "stop $id\n";
            `lxc-stop -n $id`; # --logfile=$conf{homerun}/$id/lxcweb-error.log`;
            unlink("$conf{homerun}/$id/.stamp.run");
         } else {
            my $s = $info{$id}{status}; $s = 'down' unless($s);
            print "$id cannot be stopped, because status is $s\n";
         }
         
      } elsif($do eq 'destroy') {
         if(!$info{$id}{status}) {
            print "destroy $id\n";
            `lxc-destroy -n $id`; # --logfile=$conf{homerun}/$id/lxcweb-error.log`;
         } else {
            my $s = $info{$id}{status}; $s = 'down' unless($s);
            print "$id cannot be destroyed, because status is $s\n";
         }
         
      } else {
         print "Error: unknown command $do\n";
         usage();
      }
      $i++;
   }
}


sub usage {
   print "\nUsage $APPNAME $VERSION: [cmd] {-o [clone-base]} {-t [template]} {id}...\n\tcmd\t\tcommand: {start,stop,create,freeze,unfreeze,destroy}\n\t-o clone-base\te.g. -o ubu00\n\t-t template\te.g. -t ubuntu\n";
   print "\nExamples:\n\tlxcfarm create -t ubuntu ubu00\n\tlxcfarm create -o ubu00 ubu01..20\n\tlxcfarm start ubu01..20\n\tlxcfarm stop ubu02 ubu05 ubu10..15\n";
   exit 1;
}

sub prettyDate {
   @_ = localtime($_[0]);
   sprintf("%04d/%02d/%02d %02d:%02d:%02d",$_[5]+1900,$_[4]+1,$_[3],$_[2],$_[1],$_[0]);
}

sub prettyTime {
   my($t) = @_;
   sprintf("%dd %02dh %02dm %02ds",int($t/(24*60*60)),int($t/(60*60))%24,int($t/60)%60,int($t)%60);
}

